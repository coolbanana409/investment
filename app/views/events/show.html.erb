<div id="event-details">
  <div class="ui center aligned grid">
    <div id="frame-of-event-details-image" class="fourteen wide column">
      <% if @event.picture? %>
        <%= image_tag @event.picture.url, :id => "event-details-image" %>
      <% else %>
        <img class="ui segment" id="event-details-image" src="/img/no-image.png">
      <% end %>
    </div>
    <div class="left aligned fourteen wide column">
      <div id="event-name">
        <%= @event.name %>
      </div>
      <div class="ui right aligned grid">
        <div class="right aligned ten wide column" id="event-created-or-updated-date">
          <div>投稿日：<%= @event.created_at.strftime("%Y/%m/%d") %></div>
          <div>更新日：<%= @event.updated_at.strftime("%Y/%m/%d") %></div>
        </div>
      </div>
      <div class="ui divider"></div>
      <div class="subheading-of-event-details">イベント詳細</div>
      <div class="event-content" id="event-content">
        <%= @event.content %>
      </div>
      <div class="ui divider"></div>
      <div class="subheading-of-event-details">開催日時</div>
      <div id="event-date">
        <%= @event.starting_year %>/<%= @event.starting_month %>/<%= @event.starting_day %> <%= @event.starting_hour %>:<%= @event.starting_minute %> 〜 <%= @event.ending_year %>/<%= @event.ending_month %>/<%= @event.ending_day %> <%= @event.ending_hour %>:<%= @event.ending_minute %>
      </div>
      <div>
        <svg id="time-chart"></svg>
      </div>
      <div class="ui divider"></div>
      <div class="subheading-of-event-details">開催場所</div>
      <div id="event-place">
        <%= @event.place %>
      </div>
    </div>
  </div>
  <div id="event-detail-page-map"></div>
  <div class="ui center aligned grid">
    <div class="left aligned fourteen wide column">
      <div class="ui divider"></div>
      <div class="subheading-of-event-details">料金</div>
      <div id="event-price">
        <%= @event.ticket_name %>：<%= @event.price %> 円
      </div>
      <div class="ui divider"></div>
      <div class="subheading-of-event-details">主催者</div>
      <div id="event-organizer">
        <%= @event.organizer %> <br>
        <a href="http://yahoo.co.jp">主催者に問い合わせる</a>
      </div>
      <div class="ui divider"></div>
      <div class="subheading-of-event-details">注意点</div>
      <div class="event-cautionary-note" id="event-cautionary-note">
        <%= @event.cautionary_note.empty? ? "なし" : @event.cautionary_note %>
      </div>
      <div class="ui divider"></div>
    </div>
  </div>
  <div class="frame-of-button-to-event-page">
    <div class="ui center aligned grid">
      <div class="ui button ten wide column" id="button-to-events-list">
        <%= link_to 'イベント一覧', events_path %>
      </div>
    </div>
    <% if current_user == @event.user %>
      <div class="ui center aligned grid">
        <div class="ui button ten wide column" id="button-to-edit-event">
          <%= link_to 'イベント編集', edit_event_path(@event) %>
        </div>
      </div>
      <div class="ui center aligned grid">
        <div class="ui red button ten wide column" id="button-to-delete-event">
          <%= link_to "イベント削除", @event, method: :delete, data: { confirm: "本当に削除しても大丈夫ですか?" } %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
  var vm = new Vue({
    el: "#event-details",
    methods: {
      getDevice: function() {
        var ua = navigator.userAgent;
        if (ua.indexOf('iPhone') > 0 || ua.indexOf('iPod') > 0 || ua.indexOf('Android') > 0 && ua.indexOf('Mobile') > 0) {
          return 'sp';
        } else if (ua.indexOf('iPad') > 0 || ua.indexOf('Android') > 0) {
          return 'tab';
        } else {
          return 'pc';
        }
      },
      makeTimeChart: function() {
        var device = vm.getDevice();

        var eventStartingTime = new Date(<%= @event.starting_year %>, <%= @event.starting_month %>, <%= @event.starting_day %>, <%= @event.starting_hour %>, <%= @event.starting_minute %>)
        var eventEndingTime = new Date(<%= @event.ending_year %>, <%= @event.ending_month %>, <%= @event.ending_day %>, <%= @event.ending_hour %>, <%= @event.ending_minute %>)

        var eventStartingDay = new Date(<%= @event.starting_year %>, <%= @event.starting_month %>, <%= @event.starting_day %>)
        var eventStartingNextDay = new Date(<%= @event.starting_year %>, <%= @event.starting_month %>, <%= @event.starting_day %>)
        var eventStartingRealNextDay = eventStartingNextDay.getDate() + 1;
        eventStartingNextDay.setDate(eventStartingRealNextDay);

        var width = window.innerWidth * 0.875;
        var height = 150;

        if (device == "pc") {
          var margin = {
            top: 30,
            right: 20,
            bottom: 10,
            left: 20
          };
        } else {
          var margin = {
            top: 50,
            right: 10,
            bottom: 10,
            left: 10
          };
        }
        var eventData = [{
          key: 1,
          name: '<%= @event.name %>',
          start: eventStartingTime,
          end: eventEndingTime
        }];
        var labels = d3.nest()
          .key(function(d) {
            return d.key;
          })
          .entries(eventData);
        var svg = d3.select("#time-chart")
          .attr({
            width: width,
            height: height
          });
        var x = d3.time.scale()
          .domain([
            eventStartingDay,
            eventStartingNextDay
          ])
          .clamp(true)
          .range([0, width - (margin.left + margin.right)]);
        if (device == "pc") {
          var xAxis = d3.svg.axis()
            .scale(x)
            .orient('top')
            .ticks(d3.time.hours, 1)
            .tickFormat(d3.time.format('%H:00'))
            .innerTickSize(-(height - (margin.top + margin.bottom)))
            .outerTickSize(0);
        } else {
          var xAxis = d3.svg.axis()
            .scale(x)
            .orient('top')
            .ticks(d3.time.hours, 2)
            .tickFormat(d3.time.format('%H:00'))
            .innerTickSize(-(height - (margin.top + margin.bottom)))
            .outerTickSize(0);
        }
        var y = d3.scale.ordinal()
          .domain(labels.map(function(d) {
            return d.key;
          }))
          .rangeRoundBands([margin.top, height - margin.bottom], 0.5);
        var yAxis = d3.svg.axis()
          .scale(y)
          .orient('left')
          .innerTickSize(0)
          .outerTickSize(0);

        svg.append('g')
          .attr({
            class: 'axis x-axis',
            transform: 'translate(' + margin.left + ', ' + margin.top + ')'
          })
          .call(xAxis)
          .selectAll('text')
          .attr('transform', function() {
            if (width <= 768) {
              return 'translate(7, -15) rotate(-90)';
            } else if (768 < width && width < 980) {
              return 'translate(14, -10) rotate(-45)';
            } else {
              return null;
            }
          });
        svg.append('g')
          .attr({
            class: 'axis y-axis',
            transform: 'translate(' + margin.left + ', 0)'
          })
          .call(yAxis)
          .selectAll('text')
          .each(function(d, i) {
            var el = d3.select(this);
            var parent = d3.select(this.parentNode);
            parent.append('foreignObject')
              .attr({
                x: -margin.left,
                y: -5,
                width: margin.left,
                height: 20 * 2
              })
              .append('xhtml:p')
              .attr({
                class: 'y-axis-label'
              })
            el.remove();
          });
        svg.selectAll('.active')
          .data(eventData)
          .enter()
          .append('rect')
          .attr({
            x: function(d) {
              return x(d.start) + margin.left + 1;
            },
            y: function(d, i) {
              return y(d.key) - 8;
            },
            width: 0,
            height: 50,
            fill: '#45A1CF',
            class: 'active'
          })
          .transition()
          .attr({
            width: function(d) {
              return x(d.end) - x(d.start) - 1;
            }
          });
      },
      redrawTimeChart: function() {
        var timer;

        if (timer !== false) {
          clearTimeout(timer);
        }

        timer = setTimeout(function() {
          d3.select('#time-chart').selectAll('*').remove();
          vm.makeTimeChart();
        }, 200);
      },
      makeMap: function() {
        var geocoder = new google.maps.Geocoder();
        var eventLocation;
        var mapLatLng;
        var markerLatLng;
        var marker;
        var map;

        geocoder.geocode({
          'address': '<%= @event.place %>',
          'region': 'jp'
        },function (results, status) {
            if (status === 'OK' && results[0]){
              eventLocation = results[0].geometry.location
              mapLatLng = new google.maps.LatLng(eventLocation.lat(), eventLocation.lng());
              markerLatLng = new google.maps.LatLng({lat: eventLocation.lat(), lng: eventLocation.lng()});
              marker = new google.maps.Marker({
                map: map,
                position: markerLatLng
              });
              map = new google.maps.Map(document.getElementById('event-detail-page-map'), {
                center: mapLatLng,
                zoom: 10,
                mapTypeControl: false,
                streetViewControl: false,
                fullscreenControl: false,
                zoomControl: false,
              });

              marker.setMap(map);
            }else{
              alert('失敗しました。理由: ' + status);
            }
          }
        );
      },
      // 以下のmethods内の4つの関数は、new Vueの外などでグローバル変数を定義することによって、
      // 関数内を簡単に記述したかったが、調べても出てこず、それが出来なかったため、
      // 冗長ではあるがそれぞれの関数内で毎回変数を定義した。
      // また、関数に引数を使用して、以下の4つの関数を2つにまとめたかったが、
      // '<span>','</span>'などの様に''で囲まれているためなのか(?)、@click="functionName('hoge')"の様にしても
      // 正しく引数として認識されないため(?)、それも出来なさそうなので、4つの関数を記した。
      seeMoreContent: function(){
        var contentContinueIcon = document.getElementById("content-continue-icon")
        var contentSeeMoreContent = document.getElementById("content-after-display-sentence")
        var contentSeeMoreButton = document.getElementById("content-see-more")
        var contentCloseButton = document.getElementById("content-close-see-more")

        contentContinueIcon.style.display = "none"
        contentSeeMoreContent.style.display = "inline"
        contentSeeMoreButton.style.display = "none"
        contentCloseButton.style.display = "block"
      },
      closeSeeMoreContent: function(){
        var contentContinueIcon = document.getElementById("content-continue-icon")
        var contentSeeMoreContent = document.getElementById("content-after-display-sentence")
        var contentSeeMoreButton = document.getElementById("content-see-more")
        var contentCloseButton = document.getElementById("content-close-see-more")

        contentContinueIcon.style.display = "inline"
        contentSeeMoreContent.style.display = "none"
        contentSeeMoreButton.style.display = "block"
        contentCloseButton.style.display = "none"
      },
      seeMoreCautionaryNote: function() {
        var cautionaryNoteContinueIcon = document.getElementById("cautionary-note-continue-icon")
        var cautionaryNoteSeeMoreContent = document.getElementById("cautionary-note-after-display-sentence")
        var cautionaryNoteSeeMoreButton = document.getElementById("cautionary-note-see-more")
        var cautionaryNoteCloseButton = document.getElementById("cautionary-note-close-see-more")

        cautionaryNoteContinueIcon.style.display = "none"
        cautionaryNoteSeeMoreContent.style.display = "inline"
        cautionaryNoteSeeMoreButton.style.display = "none"
        cautionaryNoteCloseButton.style.display = "block"
      },
      closeSeeMoreCautionaryNote: function() {
        var cautionaryNoteContinueIcon = document.getElementById("cautionary-note-continue-icon")
        var cautionaryNoteSeeMoreContent = document.getElementById("cautionary-note-after-display-sentence")
        var cautionaryNoteSeeMoreButton = document.getElementById("cautionary-note-see-more")
        var cautionaryNoteCloseButton = document.getElementById("cautionary-note-close-see-more")

        cautionaryNoteContinueIcon.style.display = "inline"
        cautionaryNoteSeeMoreContent.style.display = "none"
        cautionaryNoteSeeMoreButton.style.display = "block"
        cautionaryNoteCloseButton.style.display = "none"
      },
    },
    // 以下の2つの関数の共通部分以外を引数で表現して定義した関数の引数に、
    // 使用時の引数を代入した状態でこの関数を使用できなかったため(定義時の引数がそのまま使われてしまっている状態)、
    // JavaScriptによって作成されるHTMLの要素1パターンしか出来ず、
    // 2回目以降にはこの関数を使用しても効果がない状態になってしまっているため、
    // 冗長ではあるが、以下の2つの関数をまとめずにそれぞれ分けて記すことで対応させた。
    // (原因はJavaScriptによって作成された要素が''で囲まれているからということが判明した)
    //
    // また、以下の2つの関数をmethodsに定義して、それを呼び出した場合、
    // 追加されたhtml要素の@clickが役割を果たしているのではなく、ただの文字列として認識されているので、クリックしても関数が実行されない。
    // →これは、普通のHTMLの要素に@clickを入れると、デベロッパーツールで見た時に@clickが消えるのに、追加されたhtml要素の場合はそのまま@clickとして
    // 残り続けていることから判明した。
    beforeCreate: function() {
      var eventContent = document.getElementsByClassName('event-content').item(0);
      var sentence= eventContent.innerHTML;
      var alwaysDisplaySentence = sentence.substr(0,300);
      var afterDisplaySentence = sentence.substr(300);

      if (afterDisplaySentence != '') {
        eventContent.innerHTML = alwaysDisplaySentence
          + '<span id="content-continue-icon">'
          + '・・・'
          + '</span>'
          + '<span class="after-display-sentence" id="content-after-display-sentence">'
          + afterDisplaySentence
          + '</span>'
          + '<div class="see-more ui bottom attached basic button" id="content-see-more" tabindex="0" @click="seeMoreContent">'
          + 'もっと見る'
          + '</div>'
          + '<div class="close-see-more ui bottom attached basic button" id="content-close-see-more" tabindex="0" @click="closeSeeMoreContent">'
          + '閉じる'
          + '</div>'
      };
    },
    created: function() {
      var eventCautionaryNote = document.getElementsByClassName('event-cautionary-note').item(0);
      var sentence= eventCautionaryNote.innerHTML;
      var alwaysDisplaySentence = sentence.substr(0,300);
      var afterDisplaySentence = sentence.substr(300);

      if(afterDisplaySentence != ''){
        eventCautionaryNote.innerHTML = alwaysDisplaySentence
          + '<span id="cautionary-note-continue-icon">'
          + '・・・'
          + '</span>'
          + '<span class="after-display-sentence" id="cautionary-note-after-display-sentence">'
          + afterDisplaySentence
          + '</span>'
          + '<div class="see-more ui bottom attached basic button" id="cautionary-note-see-more" tabindex="0" @click="seeMoreCautionaryNote">'
          + 'もっと見る'
          + '</div>'
          + '<div class="close-see-more ui bottom attached basic button" id="cautionary-note-close-see-more" tabindex="0" @click="closeSeeMoreCautionaryNote">'
          + '閉じる'
          + '</div>'
      };
    },
    mounted: function() {
      var currentWidth = window.innerWidth;

      setTimeout(this.makeMap, 300);
      setTimeout(this.makeTimeChart, 300);
      window.addEventListener("resize", function() {
        if (currentWidth !== window.innerWidth) {
          currentWidth = window.innerWidth;
          vm.redrawTimeChart()
        }
      });
    },
  });
</script>
