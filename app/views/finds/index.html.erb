<div id="find-events">
  <div class="ui center aligned grid" id="loading" ref="loading">
    <div class="wide column">
      <div class="ui active inverted dimmer">
        <div class="ui text loader">現在地を取得しています</div>
      </div>
    </div>
  </div>
  <div class="frame-of-find-events">
    <div class="ui center aligned grid">
      <div class="fourteen wide column">
        <div id="please-find-events">イベントを探す</div>
      </div>
    </div>
  </div>
  <template v-if="tabs !== null">
    <ul class="tabs-menu">
      <li
        v-for="tab in tabs"
        :key="tab.id"
        :class="{active: activeTab.id == tab.id}"
        @click="activeTab = tab; setCookies(activeTab.id)"
      >
        {{ tab.title }}
      </li>
    </ul>
    <div class="tabs-content">
      <template v-if="activeTab.id == '0'">
        <date-content></date-content>
      </template>
      <template v-if="activeTab.id == '1'">
        <place-content></place-content>
      </template>
    </div>
  </template>
</div>

<script>
  var geocoder = new google.maps.Geocoder();
  var map;

  var dateContent = {
    data: function() {
      return { buttonColumn: "" };
    },
    methods: {
      getDevice: function() {
        var ua = navigator.userAgent;
        if (ua.indexOf("iPhone") > 0 || ua.indexOf("iPod") > 0 || ua.indexOf("Android") > 0 && ua.indexOf("Mobile") > 0) {
          return "sp";
        } else if (ua.indexOf("iPad") > 0 || ua.indexOf("Android") > 0) {
          return "tab";
        } else {
          return "pc";
        };
      },
      judgeColumn: function() {
        var device = this.getDevice();
        if (device == "pc") {
          this.buttonColumn = "four wide column";
        } else {
          this.buttonColumn = "eight wide column";
        };
      },
      appearanceAnimation: function() {
        $(".animated").waypoint({
          handler: function(direction) {
            if (direction == "down") {
              $(this.element).addClass("fadeInUp");
              this.destroy();
            };
          },
          offset: "100%"
        });
      },
    },
    created: function() {
      this.judgeColumn();
    },
    mounted: function() {
      this.appearanceAnimation();
    },
    template:`
      <div>
        <div class="ui center aligned grid">
          <div class="fourteen wide column">
            <div class="ui center aligned grid">
              <div class="wide column">
                <div class="find-events-from-created">イベント投稿日から探す</div>
              </div>
            </div>
            <div class="ui left aligned grid">
              <div class="wide column">
                <div class="select-created-range">イベント投稿日の範囲を選択してください。</div>
              </div>
            </div>
            <div class="ui left aligned grid">
              <%= render partial: "partials/finds/period_button", locals: { value: "today", buttonname: "今日のみ" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "3_days_later", buttonname: "3日前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "1_week_later", buttonname: "1週間前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "1_month_later", buttonname: "1ヶ月前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "3_months_later", buttonname: "3ヶ月前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "6_months_later", buttonname: "半年前まで" } %>
            </div>
          </div>
        </div>
        <div class="various-events-list">
          <% if @events.empty? %>
            <%= render partial: "partials/events/no-event-message", locals: { message: "投稿されたイベントはまだ存在していません。", classname: "all-events" } %>
          <% else %>
            <div class="all-events animated bounce">
              <% @events.each do |event| %>
                <%= render partial: "partials/events/list", locals: { event: event } %>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    `,
  };

  var placeContent = {
    methods: {
      getDevice: function() {
        var ua = navigator.userAgent;
        if (ua.indexOf("iPhone") > 0 || ua.indexOf("iPod") > 0 || ua.indexOf("Android") > 0 && ua.indexOf("Mobile") > 0) {
          return "sp";
        } else if (ua.indexOf("iPad") > 0 || ua.indexOf("Android") > 0) {
          return "tab";
        } else {
          return "pc";
        };
      },
      judgeDateColumn: function() {
        var device = this.getDevice();
        if (device == "pc") {
          this.judgeCenterColumn = "ten wide column";
          this.judgeSurroundingColumn = "three wide column";
        } else {
          this.judgeCenterColumn = "sixteen wide column";
          this.judgeSurroundingColumn = "";
        };
      },
      makeFindMap: function() {
        <% @events.each do |event| %>
          var pos;
          var markerData;
          var markerDataArray = [];
          var markerLatLng;
          var marker = [];
          var infoWindow = [];
          var currentInfoWindow = null;

          <% if @latitude && @longitude %>
            var mapLatLng = new google.maps.LatLng(<%= @latitude %>, <%= @longitude %>);
          <% else %>
            var mapLatLng = new google.maps.LatLng(35.681236,139.767125);
          <% end %>

          geocoder.geocode({
            "address": "<%= event.place %>",
            "region": "jp"
          },function(results, status) {
              if (status == "OK" && results[0]){
                pos = new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                markerData = [
                  {
                    name: "<%= event.name %>",
                    place: "<%= event.place %>",
                    lat: pos.lat(),
                    lng: pos.lng(),
                  }
                ];
                map = new google.maps.Map(vm.$children[0].$refs.findEventsPageMap, {
                  center: mapLatLng,
                  zoom: 9,
                  mapTypeControl: false,
                  streetViewControl: false,
                  fullscreenControl: false,
                });

                new google.maps.Circle({
                  map: map,
                  center: mapLatLng,
                  fillColor: "#f00",
                  fillOpacity: 0.3,
                  radius: 15000,
                  strokeColor: "#f00",
                  strokeOpacity: 1,
                  strokeWeight: 1
                });

                new google.maps.Circle({
                  map: map,
                  center: mapLatLng,
                  fillColor: "#fff",
                  fillOpacity: 0,
                  radius: 25000,
                  strokeColor: "#555",
                  strokeOpacity: 1,
                  strokeWeight: 1
                });

                markerDataArray.push(markerData);

                for (var i = 0; i < markerDataArray.length; i++) {
                  markerLatLng = new google.maps.LatLng({lat: markerDataArray[i][0].lat, lng: markerDataArray[i][0].lng});
                  marker[i] = new google.maps.Marker({
                    map: map,
                    position: markerLatLng
                  });
                }

                setTimeout(function(){
                  marker[i-1].addListener("click", function() {
                    infoWindow[i-1] = new google.maps.InfoWindow({
                      content: `
                        <div class="marker_name">
                          イベント名：<%= event.id %>
                          <a href="/events/<%= event.id %>">
                            ${markerDataArray[i-1][0].name}
                          </a>
                        </div>
                        <div class="marker_place">
                          開催地：${markerDataArray[i-1][0].place}
                        </div>
                      `
                    });

                    if (currentInfoWindow) {
                      currentInfoWindow.close();
                    };

                    infoWindow[i-1].open(map, marker[i-1]);
                    currentInfoWindow = infoWindow[i-1];
                  });
                }, 100);
              } else{
                alert("失敗しました。理由: " + status);
              }
            }
          );
        <% end %>
      },
      getLocationInfo: function() {
        var lat;
        var lng;
        var errorMessage;
        var errorInfo = [
          "原因不明のエラーが発生しました。",
          "位置情報の利用が許可されていません。",
          "現在位置が取得できませんでした。",
        ];

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            function(position) {
              lat = position.coords.latitude;
              lng = position.coords.longitude;
              window.location.href = `/find?latitude=${lat}&longitude=${lng}`;
            },
            function(error) {
              errorMessage = errorInfo[error.code];
              alert(errorMessage);
            }
          );
        } else {
          errorMessage = "お使いの端末は、GeoLacation APIに対応していません。";
          alert(errorMessage);
        };

        this.$parent.$refs.loading.style.display = "block"
      },
      search: function() {
        var inputAddress = this.$refs.address.value;

        geocoder.geocode({
          "address": inputAddress,
          "region": "jp"
        },function(results, status) {
            if (status == "OK" && results[0]) {
              map.setCenter(results[0].geometry.location);
            } else {
              alert("住所検索に失敗しました。住所が正しいか確認してください。");
            }
          }
        );
      },
    },
    created: function() {
      this.judgeDateColumn();
    },
    mounted: function() {
      this.makeFindMap();
    },
    template: `
      <div>
        <div class="ui center aligned grid">
          <div class="fourteen wide column">
            <div class="ui center aligned grid">
              <div class="wide column">
                <div class="find-events-from-location-info">場所から探す</div>
              </div>
            </div>
            <div class="ui left aligned grid">
              <div :class="judgeSurroundingColumn"></div>
              <div :class="judgeCenterColumn">
                <div class="map-circle-explanation">
                  赤色の円内には現在地から15km以内の場所で開催されるイベントが、<br>
                  透明の円内には現在地から25km以内の場所で開催されるイベントが表示されます。
                </div>
              </div>
              <div :class="judgeSurroundingColumn"></div>
            </div>
            <div class="ui center aligned grid">
              <div class="wide column">
                <button class="ui button" @click="getLocationInfo()">現在地を取得する</button>
              </div>
            </div>
            <div id="find-events-page-map" ref="findEventsPageMap"></div>
            <div class="ui center aligned grid">
              <div class="fourteen wide columm" id="search-address">
                <div class="item">
                  <div class="ui icon input">
                    <input id="address" type="text" name="address" placeholder="例：東京都渋谷区" ref="address">
                    <i class="search link icon" @click="search()"></i>
                    <input type="button" id="search" value="検索" @click="search()">
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `
  };

  var vm = new Vue({
    el: "#find-events",
    components: {
      "date-content": dateContent,
      "place-content": placeContent
    },
    data: {
      tabs: [
        {
          id: "0",
          title: "日時から検索する",
        },
        {
          id: "1",
          title: "場所から検索する",
        },
      ],
      activeTab: "",
    },
    methods: {
      setActiveTab: function() {
        this.activeTab = this.tabs[0];
      },
      setCookies: function(activeTabId) {
        Cookies.set("activeTabId", activeTabId);
      },
      getCookies: function() {
        this.activeTab = this.tabs[Cookies.get("activeTabId")];
      },
    },
    created: function() {
      this.setActiveTab();
      this.getCookies();
    },
  });
</script>
