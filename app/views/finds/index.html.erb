<div id="find-events">
  <div class="ui center aligned grid">
    <div class="fourteen wide column">
      <div id="events-list-in-japanese">イベントを探す</div>
    </div>
  </div>
  <template v-if="tabs !== null">
    <ul class="tabs-menu">
      <li
        v-for="tab in tabs"
        :key="tab.id"
        :class="{active: activeTab.id == tab.id}"
        @click="activeTab = tab; setCookies(activeTab.id)"
      >
        {{ tab.title }}
      </li>
    </ul>
    <div class="tabs-content">
      <template v-if="activeTab.id == '0'">
        <date-content @animation="appearanceAnimation"></date-content>
      </template>
      <template v-if="activeTab.id == '1'">
        <place-content></place-content>
      </template>
    </div>
  </template>
</div>

<script>
  var dateContent = {
    data: function() {
      return { buttonColumn: "eight wide column" };
    },
    methods: {
      getDevice: function() {
        var ua = navigator.userAgent;
        if (ua.indexOf('iPhone') > 0 || ua.indexOf('iPod') > 0 || ua.indexOf('Android') > 0 && ua.indexOf('Mobile') > 0) {
          return 'sp';
        } else if (ua.indexOf('iPad') > 0 || ua.indexOf('Android') > 0) {
          return 'tab';
        } else {
          return 'pc';
        }
      },
      judgeColumn: function() {
        var device = this.getDevice();
        if (device == "pc") {
          this.buttonColumn = "four wide column"
        } else {
          this.buttonColumn = "eight wide column"
        }
      },
      callParentAnimation: function() {
        this.$emit('animation')
      }
    },
    created: function() {
      setTimeout(this.judgeColumn, 10);
      setTimeout(this.callParentAnimation, 10);
    },
    template:`
      <div>
        <div class="ui center aligned grid">
          <div class="fourteen wide column">
            <div class="ui center aligned grid">
              <div class="wide column">
                <div class="find-events-from-created">イベント投稿日から探す</div>
              </div>
            </div>
            <div class="ui left aligned grid">
              <div class="wide column">
                <div class="select-created-range">イベント投稿日の範囲を選択してください。</div>
              </div>
            </div>
            <div class="ui left aligned grid">
              <%= render partial: "partials/finds/period_button", locals: { value: "today", buttonname: "今日のみ" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "3_days_later", buttonname: "3日前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "1_week_later", buttonname: "1週間前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "1_month_later", buttonname: "1ヶ月前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "3_months_later", buttonname: "3ヶ月前まで" } %>
              <%= render partial: "partials/finds/period_button", locals: { value: "6_months_later", buttonname: "半年前まで" } %>
            </div>
          </div>
        </div>
        <div class="various-events-list">
          <% if @events.empty? then %>
            <%= render partial: "partials/events/no-event-message", locals: { message: "投稿されたイベントはまだ存在していません。", classname: "all-events" } %>
          <% else %>
            <div class="all-events animated bounce">
              <% @events.each do |event| %>
                <%= render partial: "partials/events/list", locals: { event: event } %>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    `,
  };

  var placeContent = {
    methods: {
      showMap: function() {
        <% @events.each do |event| %>
          var map;
          var marker = [];
          var infoWindow = [];
          var currentInfoWindow = null;
          var geocoder = new google.maps.Geocoder();
          var markerDataArray = [];
          var mapLatLng;
          var pos;
          var markerLatLng;
          var markerData;

          geocoder.geocode({
            'address': '<%= event.place %>',
            'region': 'jp'
          },function (results, status) {
              if (status === 'OK' && results[0]){
                <% if @latitude && @longitude then %>
                  mapLatLng = new google.maps.LatLng(<%= @latitude %>, <%= @longitude %>);
                <% else %>
                  mapLatLng = new google.maps.LatLng(35.681236,139.767125);
                <% end %>
                pos = new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                markerData = [
                  {
                    name: '<%= event.name %>',
                    place: '<%= event.place %>',
                    lat: pos.lat(),
                    lng: pos.lng(),
                  }
                ];

                map = new google.maps.Map(document.getElementById('find-events-page-map'), {
                  center: mapLatLng,
                  zoom: 9,
                  mapTypeControl: false,
                  streetViewControl: false,
                  fullscreenControl: false,
                });

                new google.maps.Circle({
                  map: map,
                  center: mapLatLng,
                  fillColor: '#f00',
                  fillOpacity: 0.3,
                  radius: 15000,
                  strokeColor: '#f00',
                  strokeOpacity: 1,
                  strokeWeight: 1
                });

                new google.maps.Circle({
                  map: map,
                  center: mapLatLng,
                  fillColor: '#fff',
                  fillOpacity: 0,
                  radius: 25000,
                  strokeColor: '#555',
                  strokeOpacity: 1,
                  strokeWeight: 1
                });

                markerDataArray.push(markerData);

                for (var i = 0; i < markerDataArray.length; i++) {
                  var markerLatLng = new google.maps.LatLng({lat: markerDataArray[i][0].lat, lng: markerDataArray[i][0].lng});
                  marker[i] = new google.maps.Marker({
                    map: map,
                    position: markerLatLng
                  });
                }

                setTimeout(function(){
                  marker[i-1].addListener('click', function() {
                    infoWindow[i-1] = new google.maps.InfoWindow({
                      content: `
                        <div class="marker_name">
                          イベント名：<%= event.id %>
                          <a href="/events/<%= event.id %>">
                            ${markerDataArray[i-1][0].name}
                          </a>
                        </div>
                        <div class="marker_place">
                          開催地：${markerDataArray[i-1][0].place}
                        </div>
                      `
                    });

                    if (currentInfoWindow) {
                      currentInfoWindow.close();
                    }

                    infoWindow[i-1].open(map, marker[i-1]);
                    currentInfoWindow = infoWindow[i-1];
                  });
                }, 100);
              }else{
                alert('失敗しました。理由: ' + status);
              }
            }
          );
        <% end %>
      },
      getLocationInfo: function() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            function(position) {
              var lat = position.coords.latitude;
              var lng = position.coords.longitude;
              window.location.href = `/find?latitude=${lat}&longitude=${lng}`
            },
            function (error) {
              var errorInfo = [
                "原因不明のエラーが発生しました。",
                "位置情報の利用が許可されていません。",
                "現在位置が取得できませんでした。",
              ];
              var errorNumber = error.code;
              var errorMessage = "[エラー番号:" + errorNumber + "]\n" + errorInfo[errorNumber];
              alert(errorMessage);
            }
          );
        } else {
          var errorMessage = "お使いの端末は、GeoLacation APIに対応していません。";
          alert(errorMessage);
        }
      }
    },
    mounted: function() {
      setTimeout(this.showMap, 300);
    },
    template: `
      <div>
        <div class="ui center aligned grid">
          <div class="fourteen wide column">
            <div class="ui center aligned grid">
              <div class="wide column">
                <div class="find-events-from-location-info">位置情報から探す</div>
              </div>
            </div>
            <div class="ui left aligned grid">
              <div class="wide column">
                <div class="map-circle-explanation">
                  赤色の円内には現在地から15km以内の場所で開催されるイベントが、<br>
                  透明の円内には現在地から25km以内の場所で開催されるイベントが表示されます。
                </div>
              </div>
            </div>
            <div class="ui center aligned grid">
              <div class="wide column">
                <button class="ui button" @click="getLocationInfo">現在地を取得する</button>
              </div>
            </div>
            <div id="find-events-page-map"></div>
          </div>
        </div>
      </div>
    `
  };

  var vm = new Vue({
    el: "#find-events",
    components: {
      "date-content": dateContent,
      "place-content": placeContent
    },
    data: {
      tabs: [
        {
          id: "0",
          title: "日時から検索する",
        },
        {
          id: "1",
          title: "場所から検索する",
        },
      ],
      activeTab: "",
    },
    methods: {
      setActiveTab: function() {
        vm.activeTab = vm.tabs[0];
      },
      appearanceAnimation: function() {
        $(".animated").waypoint({
          handler: function(direction) {
            if (direction === "down") {
              $(this.element).addClass("fadeInUp");
              this.destroy();
            }
          },
          offset: "100%"
        });
      },
      setCookies: function(activeTabId) {
        Cookies.set('activeTabId', activeTabId, {path: ''});
      },
      getCookies: function() {
        vm.activeTab = vm.tabs[Cookies.get('activeTabId')];
      }
    },
    created: function() {
      setTimeout(this.setActiveTab, 10);
      setTimeout(this.appearanceAnimation, 10);
      setTimeout(this.getCookies, 10);
    }
  });
</script>
